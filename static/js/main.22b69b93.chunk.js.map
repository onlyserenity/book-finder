{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","setState","initialState","loading","emptyStr","query","search","value","trim","replace","fetch","concat","then","res","json","result","items","error","_handleKeyPress","e","key","emptyResults","state","bookCards","_this2","react_default","a","createElement","className","map","item","App_Cards","id","bookTitle","volumeInfo","title","bookAuthor","hasOwnProperty","authors","join","bookPublisher","publisher","bookLink","previewLink","imageLink","imageLinks","smallThumbnail","type","name","placeholder","ref","input","onKeyPress","onClick","src","Component","Cards","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22b69b93.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      initialState: true,\n      loading: false,\n      emptyStr: false,\n      items: null\n    };\n  }\n\n  handleInputChange = () => {\n    this.setState({\n      initialState: false,\n      loading: true,\n      emptyStr: false\n    })\n    let query = this.search.value.trim().replace(' ','+')\n    if (query){\n      fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}&maxResults=20`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            items: result.items,\n            loading: false\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            loading: false,\n            error\n          });\n        }\n      )\n    }\n    else {\n      this.setState({\n        emptyStr: true,\n        loading: false,\n        items: null\n      })\n    }\n  }\n\n  _handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      this.handleInputChange();\n    }\n  }\n\n  emptyResults = () => {\n    this.setState = {\n      initialState: true\n    }\n  }\n\n  render() {\n    let bookCards;\n    if (this.state.error) {\n      bookCards = <div className='error'> Error: Cannot fetch data from Google Books!</div>\n    }\n    else if (this.state.initialState) {\n      bookCards = 'Nothing Here Yet - Try Searching For A Book';\n    }\n    else if (this.state.items) {\n      bookCards = this.state.items.map(item => \n                  <Cards key={item.id} \n                        bookTitle={item.volumeInfo.title} \n                        bookAuthor={item.volumeInfo.hasOwnProperty('authors')?\n                          item.volumeInfo.authors.join(', ') : 'Unknown'}\n                        bookPublisher={item.volumeInfo.hasOwnProperty('publisher')?\n                          item.volumeInfo.publisher: 'Unknown'}\n                        bookLink={item.volumeInfo.previewLink}\n                        imageLink={item.volumeInfo.hasOwnProperty('imageLinks')?\n                          item.volumeInfo.imageLinks.smallThumbnail : \n                          './img/cover.jpeg'}\n                  />);\n    }\n    else if (!this.state.items && !this.state.loading) {\n      bookCards = 'No Book Found - Try Another Query';\n    }\n    return (\n      <div className='App'>\n        <header>\n          BOOK FINDER\n        </header>\n        <div>\n          <input className='search-input' type='search' name='SearchInput' \n          placeholder='Search by book title or author...' \n          ref={input => this.search = input}\n          onKeyPress={this._handleKeyPress} />\n          <button className='search-btn' onClick={this.handleInputChange}>Search</button>\n        </div>\n        {this.state.emptyStr && <div className='error'>Please provide a valid search query!</div>}\n        {this.state.loading && <img src='./img/loading.gif' className='loading-img' />}\n        <div className='book-display'>\n          {bookCards}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Cards extends Component {\n  render() {\n    return (\n      <div className='book-card'>\n        <div className='book-cover'>\n          <img className='book-img' src={this.props.imageLink} alt={this.props.bookTitle} />\n        </div>\n        <div className='book-info'>\n          <div className='book-title'>{this.props.bookTitle}</div>\n          <div className='book-author'>By: {this.props.bookAuthor}</div>\n          <div className='book-publisher'>Published By: {this.props.bookPublisher}</div>\n          <a href={this.props.bookLink} target='_blank' rel='noopener noreferrer'>\n          <button className='book-link'>See this Book</button></a>\n        </div>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}