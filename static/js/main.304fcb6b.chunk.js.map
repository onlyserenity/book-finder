{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","query","search","value","replace","fetch","concat","then","res","json","result","setState","isLoaded","initialState","items","error","_handleKeyPress","e","key","emptyResults","state","bookCards","_this2","map","item","react_default","a","createElement","App_Cards","bookId","id","bookTitle","volumeInfo","title","bookAuthor","authors","bookPublisher","publisher","bookLink","previewLink","imageLink","hasOwnProperty","imageLinks","smallThumbnail","className","type","name","placeholder","ref","input","onKeyPress","onClick","Component","Cards","src","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,kBAAoB,WAClB,IAAIC,EAAQR,EAAKS,OAAOC,MAAMC,QAAQ,IAAI,KACtCH,GACFI,MAAK,iDAAAC,OAAkDL,IACtDM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCjB,EAAKkB,SAAS,CACZC,UAAU,EACVC,cAAc,EACdC,MAAOJ,EAAOI,SAMlB,SAACC,GACCtB,EAAKkB,SAAS,CACZC,UAAU,EACVG,aA1BStB,EAiCnBuB,gBAAkB,SAACC,GACH,UAAVA,EAAEC,KACJzB,EAAKO,qBAnCUP,EAuCnB0B,aAAe,WACb1B,EAAKkB,SAAW,CACdE,cAAc,IAvChBpB,EAAK2B,MAAQ,CACXP,cAAc,GAHCpB,wEA6CV,IACH4B,EADGC,EAAA1B,KAoBP,OAjBEyB,EADEzB,KAAKwB,MAAMP,aACD,8CAELjB,KAAKwB,MAAMN,MACNlB,KAAKwB,MAAMN,MAAMS,IAAI,SAAAC,GAAI,OACzBC,EAAAC,EAAAC,cAACC,EAAD,CAAOC,OAAQL,EAAKM,GACdC,UAAWP,EAAKQ,WAAWC,MAC3BC,WAAYV,EAAKQ,WAAWG,QAC5BC,cAAeZ,EAAKQ,WAAWK,UAC/BC,SAAUd,EAAKQ,WAAWO,YAC1BC,UAAWhB,EAAKQ,WAAWS,eAAe,cACxCjB,EAAKQ,WAAWU,WAAWC,eAC3B,iDAIR,oCAGZlB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAAA,6BAGAF,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,gBACbnB,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,SAASC,KAAK,cAC1BC,YAAY,oCACZC,IAAK,SAAAC,GAAK,OAAI3B,EAAKpB,OAAS+C,GAC5BC,WAAYtD,KAAKoB,kBACjBS,EAAAC,EAAAC,cAAA,UAAQwB,QAASvD,KAAKI,mBAAtB,WAEFyB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,gBACZvB,WA/EO+B,cAsFZC,mLAEF,OACE5B,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,YAAY1B,IAAKtB,KAAKJ,MAAMqC,QACzCJ,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,WAAWU,IAAK1D,KAAKJ,MAAMgD,UAAWe,IAAK3D,KAAKJ,MAAMuC,YACrEN,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,aACbnB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,cAAchD,KAAKJ,MAAMuC,WACxCN,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,eAAf,OAAkChD,KAAKJ,MAAM0C,YAC7CT,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,kBAAf,iBAA+ChD,KAAKJ,MAAM4C,eAC1DX,EAAAC,EAAAC,cAAA,KAAG6B,KAAM5D,KAAKJ,MAAM8C,SAAUmB,OAAO,SAASC,IAAI,uBAClDjC,EAAAC,EAAAC,cAAA,UAAQiB,UAAU,aAAlB,2BAVUQ,aAiBL7D,IC9FKoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,KAAK,SAAAiE,GACjCA,EAAaC","file":"static/js/main.304fcb6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialState: true\n    };\n  }\n\n  handleInputChange = () => {\n    let query = this.search.value.replace(' ','+')\n    if (query){\n      fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            initialState: false,\n            items: result.items\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    }\n  }\n\n  _handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      this.handleInputChange();\n    }\n  }\n\n  emptyResults = () => {\n    this.setState = {\n      initialState: true\n    }\n  }\n\n  render() {\n    let bookCards;\n    if (this.state.initialState) {\n      bookCards = 'Nothing Here Yet - Try Searching For A Book';\n    }\n    else if (this.state.items) {\n      bookCards = this.state.items.map(item => \n                  <Cards bookId={item.id} \n                        bookTitle={item.volumeInfo.title} \n                        bookAuthor={item.volumeInfo.authors}\n                        bookPublisher={item.volumeInfo.publisher}\n                        bookLink={item.volumeInfo.previewLink}\n                        imageLink={item.volumeInfo.hasOwnProperty('imageLinks')?\n                          item.volumeInfo.imageLinks.smallThumbnail : \n                          'http://lgimages.s3.amazonaws.com/nc-md.gif'}\n                  />);\n    }\n    else {\n      bookCards = 'No Book Found - Try Another Query';\n    }\n    return (\n      <div className='App'>\n        <header>\n          BOOK FINDER\n        </header>\n        <div className='search-input'>\n          <input type='search' name='SearchInput' \n          placeholder='Search by book title or author...' \n          ref={input => this.search = input}\n          onKeyPress={this._handleKeyPress} />\n          <button onClick={this.handleInputChange}>Search</button>\n        </div>\n        <div className='book-display'>\n          {bookCards}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Cards extends Component {\n  render() {\n    return (\n      <div className='book-card' key={this.props.bookId}>\n        <img className='book-img' src={this.props.imageLink} alt={this.props.bookTitle} />\n        <div className='book-info'>\n          <div className='book-title'>{this.props.bookTitle}</div>\n          <div className='book-author'>By: {this.props.bookAuthor}</div>\n          <div className='book-publisher'>Published By: {this.props.bookPublisher}</div>\n          <a href={this.props.bookLink} target='_blank' rel='noopener noreferrer'>\n          <button className='book-link'>See this Book</button></a>\n        </div>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}